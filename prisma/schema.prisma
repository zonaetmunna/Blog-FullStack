generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String    @id @default(uuid()) @db.VarChar(36)
  username           String    @unique
  email              String    @unique
  password           String
  role               Role      @default(user)
  needPasswordChange Boolean   @default(true)
  passwordChangedAt  DateTime  @default(now())
  isDeleted          Boolean   @default(false)
  status             Status    @default(inProgress)
  createdAt          DateTime? @default(now())
  updatedAt          DateTime? @updatedAt
  posts              Blog[]
  comments           Comment[]
  likes              Like[]
}

enum Role {
  superAdmin
  admin
  user
}

enum Status {
  inProgress
  active
  blocked
}

model Blog {
  id        String    @id @default(uuid()) @db.VarChar(36)
  title     String
  content   String
  published Boolean   @default(false)
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  authorId  String    @db.VarChar(36)
  author    User      @relation(fields: [authorId], references: [id])
  comments  Comment[]
  likes     Like[]
  likeCount Int       @default(0)
}

model Comment {
  id        String    @id @default(dbgenerated()) @db.VarChar(36)
  content   String
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  authorId  String    @db.VarChar(36)
  author    User      @relation(fields: [authorId], references: [id])
  blogId    String    @db.VarChar(36)
  blog      Blog      @relation(fields: [blogId], references: [id])
}

model Like {
  id        String    @id @default(dbgenerated()) @db.VarChar(36)
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  authorId  String    @db.VarChar(36)
  author    User      @relation(fields: [authorId], references: [id])
  blogtId   String    @db.VarChar(36)
  blog      Blog      @relation(fields: [blogtId], references: [id])
}
